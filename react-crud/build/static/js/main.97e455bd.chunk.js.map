{"version":3,"sources":["pages/Home.js","service/api.js","component/Getdate.js","pages/Agents.js","pages/Numbers.js","pages/Default.js","sections/Header.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","state","logs","axios","get","then","response","data","setState","date","Date","hour","getHours","minute","getMinutes","Container","Table","striped","bordered","hover","responsive","this","map","l","index","key","to","pathname","number","numberOfCalls","agentIdentifier","agentName","getTime","dateTime","Component","getDate","second","getSeconds","day","month","getMonth","year","getFullYear","Agents","agents","id","match","params","resolution","numbers","Default","location","Header","useState","isOpen","setIsOpen","Navbar","color","light","expand","NavbarBrand","href","NavbarToggler","onClick","App","Fragment","exact","path","component","Numbers","Boolean","window","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.97e455bd.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport {\r\n    Container,\r\n    Table \r\n} from 'reactstrap';\r\nimport {getCalls} from '../service/api';\r\nimport {Link} from 'react-router-dom'\r\n\r\nexport default class Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            logs: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n       getCalls().then(response=>{\r\n           let {data} = response;\r\n           \r\n           this.setState({logs:data});\r\n       })\r\n    }\r\n\r\n    getTime(date) {\r\n        let data = new Date(date);\r\n        let hour = data.getHours();\r\n        let minute = data.getMinutes();\r\n        return `${hour}:${minute}`;\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Table striped bordered hover responsive>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Phone number</th>\r\n                            <th>Number of calls</th>\r\n                            <th>Last call details</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            this.state.logs.map((l,index) => {\r\n                                return(\r\n                                    <tr key={index}>\r\n                                        <td><Link to={{pathname:`/calls/${l.number}`}} >{l.number}</Link></td>\r\n                                        <td>{l.numberOfCalls} call{l.number === 1 ? '' : 's'}</td>\r\n                                        <td><Link to={{pathname:`/agent/${l.agentIdentifier}`}}>{l.agentName}</Link> / {this.getTime(l.dateTime)}</td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }   \r\n                    </tbody>\r\n                </Table>\r\n            </Container>\r\n        )\r\n    }\r\n}","import axios from 'axios';\r\n\r\nexport function getCalls() {\r\n    return axios.get('http://localhost:8080/calls');\r\n}\r\n\r\nexport function getAgents(id) {\r\n    return axios.get('http://localhost:8080/agent/'+id);\r\n}\r\n\r\nexport function getNumbers(number) {\r\n    return axios.get('http://localhost:8080/calls/'+number);\r\n}","export const getDate = (date) => {\n    let data = new Date(date);\n    \n    let second = data.getSeconds();\n    let minute = data.getMinutes();\n    let hour = data.getHours();\n    let day = data.getDate();\n    let month = data.getMonth() === 0 ? 12 : data.getMonth();\n    let year = data.getFullYear();\n\n    return `${day}/${month}/${year} ${hour}:${minute}:${second}`;\n}","import React, { Component } from 'react'\r\nimport {\r\n    Container,\r\n    Table \r\n} from 'reactstrap';\r\nimport { getAgents } from '../service/api';\r\nimport {Link} from 'react-router-dom';\r\nimport {getDate} from '../component/Getdate';\r\n\r\nexport default class Agents extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            agents: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n       getAgents(this.props.match.params.id).then(response=>{\r\n           let {data} = response;\r\n           this.setState({agents:data});\r\n       })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Table striped bordered hover responsive>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Phone number</th>\r\n                            <th>Call date and time</th>\r\n                            <th>Resolution</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            this.state.agents.map((l,index) => {\r\n                                return(\r\n                                    <tr key={index}>\r\n                                        <td><Link to={{pathname:`/calls/${l.number}`}} >{l.number}</Link></td>\r\n                                        <td>{getDate(l.dateTime)}</td>\r\n                                        <td>{l.resolution}</td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }   \r\n                    </tbody>\r\n                </Table>\r\n            </Container>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react'\r\nimport {\r\n    Container,\r\n    Table \r\n} from 'reactstrap';\r\nimport { getNumbers } from '../service/api';\r\nimport {Link} from 'react-router-dom';\r\nimport {getDate} from '../component/Getdate';\r\n\r\nexport default class Agents extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            numbers: []\r\n        }\r\n    }\r\n    componentDidMount() {\r\n       getNumbers(this.props.match.params.number).then(response=>{\r\n           let {data} = response;\r\n           this.setState({numbers:data});\r\n       })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Container>\r\n                <Table striped bordered hover responsive>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Agent Name</th>\r\n                            <th>Call date and time</th>\r\n                            <th>Resolution</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            this.state.numbers.map((l,index) => {\r\n                                return(\r\n                                    <tr key={index}>\r\n                                        <td><Link to={{pathname:`/agent/${l.agentIdentifier}`}}>{l.agentName}</Link></td>\r\n                                        <td>{getDate(l.dateTime)}</td>\r\n                                        <td>{l.resolution}</td>\r\n                                    </tr>\r\n                                )\r\n                            })\r\n                        }   \r\n                    </tbody>\r\n                </Table>\r\n            </Container>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class Default extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1 >404</h1>\r\n        <h1>error</h1>\r\n        <h2>page not found</h2>\r\n        <h3>the requested URL\r\n          <span >\r\n            {this.props.location.pathname}\r\n          </span>\r\n          {\" \"} was not found\r\n        </h3>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { useState } from 'react';\r\nimport {\r\n    Container,\r\n    Navbar,\r\n    NavbarToggler,\r\n    NavbarBrand,\r\n} from 'reactstrap';\r\n\r\nconst Header = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n        <Navbar color=\"light\" light expand=\"md\">\r\n            <Container>\r\n                <NavbarBrand href=\"/\">Home</NavbarBrand>\r\n                <NavbarToggler onClick={toggle} />\r\n            </Container>\r\n        </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;","import React, { Component } from \"react\"\nimport {Switch, Route} from 'react-router-dom'\nimport Home from \"./pages/Home\"\nimport Agents from \"./pages/Agents\"\nimport Numbers from \"./pages/Numbers\"\nimport Default from \"./pages/Default\"\nimport Header from \"./sections/Header\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <React.Fragment > \n          <Header/>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/agent/:id\" component={Agents} />\n            <Route exact path=\"/calls/:number\" component={Numbers} />\n            <Route component={Default} />\n          </Switch>\n        </React.Fragment>\n      </div>\n    );\n  }\n}\n\nexport default App;\n      ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter as Router} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <Router>\n      <App />\n  </Router>, \n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();\n"],"sourceRoot":""}